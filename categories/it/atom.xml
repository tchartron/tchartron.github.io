<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="fr">
	<title>tchartron - it</title>
	<subtitle>Un blog sur le d√©veloppement web, le devops</subtitle>
	<link href="https://tchartron.com/categories/it/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://tchartron.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-11-04T00:00:00+00:00</updated>
	<id>https://tchartron.com/categories/it/atom.xml</id>
	<entry xml:lang="fr">
		<title>Docker swarm</title>
		<published>2021-11-04T00:00:00+00:00</published>
		<updated>2021-11-04T00:00:00+00:00</updated>
		<link href="https://tchartron.com/fr/docker/docker-compose-swarm/" type="text/html"/>
		<id>https://tchartron.com/fr/docker/docker-compose-swarm/</id>
		<content type="html">&lt;h2 id=&quot;create-a-docker-swarm-cluster-using-a-docker-compose-file-and-traefik-reverse-proxy&quot;&gt;Create a docker swarm cluster using a docker-compose file and traefik reverse proxy&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Example git repository for compose project used : &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell z-code&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# install docker on all machines (i use a single node for now)
# using debian
sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
    
curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg

echo \
  &amp;quot;deb [arch=$(dpkg --print-architecture) signed-by=&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian \
  $(lsb_release -cs) stable&amp;quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &amp;gt; &#x2F;dev&#x2F;null
  
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io

# Add non root user to docker group to allow him to run docker
sudo groupadd docker
sudo usermod -aG docker $USER
# Start on boot 
sudo systemctl enable docker.service
sudo systemctl enable containerd.service

# Use an image registry
# Create gitlab access token with write_registry and read_registry
# Login to registry
docker login registry.gitlab.com -u tchartron -p my_gitlab_access_token
# Build images
docker compose -f docker-compose.swarm.yml build [--no-cache]
# Push images
docker push registry.gitlab.com&#x2F;monprojet&#x2F;web&#x2F;projet-php:0.1
docker push registry.gitlab.com&#x2F;monprojet&#x2F;web&#x2F;projet-mysql:0.1
docker push registry.gitlab.com&#x2F;monprojet&#x2F;web&#x2F;projet-nginx:0.1
docker push registry.gitlab.com&#x2F;monprojet&#x2F;web&#x2F;projet-mercure:0.1

# Initialize the swarm on the manager node
docker swarm init
# Add workers eventually
# Create overlay network
docker network create -d overlay projet_overlay
# Get nodes
docker node ls
# Add label to match defined placement constraint (from docker-compose file) for mysql container as it is pinned to a specific host
docker node update --label-add hostname=manager_1 vmroytpjhydkmnrl4nj4levtg
# Deploy the stack
docker stack deploy --with-registry-auth --compose-file docker-compose.swarm.yml projet
# Deploy the stack with preprocessing to interpolate env vars !
(echo -e &amp;quot;version: &amp;#39;3.8&amp;#39;\n&amp;quot;;  docker compose -f docker-compose.swarm.yml config) | docker stack deploy --with-registry-auth --compose-file - projet
# Prod deploy
docker stack deploy --with-registry-auth --compose-file docker-compose.swarm.prod.yml projet

#Test to see if it&amp;#39;s loadbalanced and other behaviors
#Test scaling php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;troubleshooting-and-useful-commands&quot;&gt;Troubleshooting and useful commands&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell z-code&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#Find why container does not start
docker service ps --no-trunc projet_mysql
#OR if on linux (above command does not show every errors)
journalctl -u docker.service | tail -n 50 

#Logs of running service
docker service logs projet_traefik -f

#Leave the swarm and destroy it&amp;#39;s services and containers
docker swarm leave --force

#This explains how to communicate to service with hostname 
https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;55039198&#x2F;docker-swarm-how-to-communicate-to-other-services-through-their-hostname-only
``
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
</feed>
